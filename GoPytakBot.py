import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from openai import OpenAI
import asyncio
from django.conf import settings

import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'GoPytak.settings')
django.setup()


# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=settings.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# OpenAI client setup
client = OpenAI(api_key=settings.OPENAI_API_KEY)


# States
class BotStates(StatesGroup):
    main_menu = State()
    ai_consultation = State()


# Chat history storage {user_id: [messages]}
chat_histories = {}


# Start command
@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()
    markup = types.ReplyKeyboardMarkup(keyboard=[
        [types.KeyboardButton(text="üöú –ù–∞—à–∏ —É—Å–ª—É–≥–∏:")],
        [types.KeyboardButton(text="üèó –î–æ—Å—Ç—É–ø–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞:")],
        [types.KeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")],
        [types.KeyboardButton(text="ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ò–ò:")]
    ], resize_keyboard=True)

    await message.answer(
"""
üë∑‚Äç‚ôÇÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ ‚ÄúGoPytak‚Äù
–ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –∏ —Ä–∞—Å—Å–∫–∞–∂—É –æ–± —É—Å–ª—É–≥–∞—Ö. –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?üëá:
""" ,
        reply_markup=markup
    )
    await state.set_state(BotStates.main_menu)


# Handler for "Our Services" button
@dp.message(F.text == "üöú –ù–∞—à–∏ —É—Å–ª—É–≥–∏:", BotStates.main_menu)
async def our_services(message: types.Message):
    services_text = """
–í—ã–±–∏—Ä–∞–π—Ç–µ, —á–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å üëá:

üî© –ú–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Ç–æ—á–Ω–æ, –≤ —Å—Ä–æ–∫!
üõ£ –£–∫–ª–∞–¥–∫–∞ –∞—Å—Ñ–∞–ª—å—Ç–∞ –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö –∏ –º–æ—Å—Ç–∞—Ö ‚Äî –≥–ª–∞–¥–∫–æ, —Ä–æ–≤–Ω–æ, –Ω–∞–¥–µ–∂–Ω–æ!
‚õè –ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã ‚Äî –∫–æ–ø–∞–µ–º –±—ã—Å—Ç—Ä–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –ª—é–±–æ–π –æ–±—ä–µ–º!
üèó –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ç–ª–æ–≤–∞–Ω–æ–≤ ‚Äî –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞!

–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await message.answer(services_text)


@dp.message(F.text == "üèó –î–æ—Å—Ç—É–ø–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞:", BotStates.main_menu)
async def our_services(message: types.Message):
    services_text = """
–í—Å—è —Ç–µ—Ö–Ω–∏–∫–∞ ‚Äî –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! ‚úÖ

üë∑‚Äç‚ôÄÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞:
    - üöú –≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã ‚Äî –ª—é–±—ã–µ –æ–±—ä–µ–º—ã –∑–µ–º–ª—è–Ω—ã—Ö —Ä–∞–±–æ—Ç!

üõ§ –î–æ—Ä–æ–∂–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞:
    - üöß –ê—Å—Ñ–∞–ª—å—Ç–æ—É–∫–ª–∞–¥—á–∏–∫–∏ ‚Äî —Ä–æ–≤–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–æ—Ä–æ–≥ –∏ —Ç—Ä–æ—Ç—É–∞—Ä–æ–≤!

üèó –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞:
    - üöÄ –ü–æ–¥—ä–µ–º–Ω–∏–∫–∏ ‚Äî –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞, –≤—ã—Å–æ—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–¥–∞—á!

–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await message.answer(services_text)


# Handler for "QA" button
@dp.message(F.text == "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", BotStates.main_menu)
async def qa_handler(message: types.Message):
    qa_text = """
‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

üí¨ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∞—Ä–µ–Ω–¥–∞?
–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Å—Ä–æ–∫–æ–≤ –∞—Ä–µ–Ω–¥—ã. –†–∞—Å—Å—á–∏—Ç–∞—é –∑–∞ 1 –º–∏–Ω—É—Ç—É ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!

üí¨ –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É?
üöö –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –¥–æ—Å—Ç–∞–≤–∏–º —Ç–µ—Ö–Ω–∏–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç ‚Äî –æ—Ç 2 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞!

üí¨ –†–∞–±–æ—Ç–∞–µ—Ç–µ —Å —Ñ–∏–∑–ª–∏—Ü–∞–º–∏ –∏ —é—Ä–ª–∏—Ü–∞–º–∏?
‚úÖ –î–∞, –æ—Ñ–æ—Ä–º–ª—è–µ–º –¥–æ–≥–æ–≤–æ—Ä—ã –Ω–∞ –ª—é–±—ã–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç.

üí¨ –ï—Å—Ç—å –ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –±–µ–∑ –≤–æ–¥–∏—Ç–µ–ª—è?
üõ† –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫—É —Å –æ–ø—ã—Ç–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ ‚Äú–±–µ–∑‚Äù ‚Äî –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ!

–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await message.answer(qa_text)


# Handler for "Consult with AI" button
@dp.message(F.text == "ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ò–ò:", BotStates.main_menu)
async def start_ai_consultation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # Initialize chat history for this user if it doesn't exist
    if user_id not in chat_histories:
        chat_histories[user_id] = [
            {"role": "system", "content": "You are a helpful assistant."}
        ]

    markup = types.ReplyKeyboardMarkup(keyboard=[
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

    await message.answer(
        '''
–ù–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∑–∞–¥–∞—á—É ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—é –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏! üí∏. 
–ù–∞–ø–∏—à–∏—Ç–µ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:
        ''',
        reply_markup=markup
    )
    await state.set_state(BotStates.ai_consultation)


# Handler for messages in AI consultation mode
@dp.message(BotStates.ai_consultation)
async def process_ai_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_message = message.text

    # Check if user wants to go back to main menu
    if user_message == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await send_welcome(message, state)
        return

    # Add user message to chat history
    chat_histories[user_id].append({"role": "user", "content": user_message})

    try:
        # Call OpenAI API
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=chat_histories[user_id],
            max_tokens=500,
            temperature=0.7,
        )

        # Extract response
        ai_response = response.choices[0].message.content

        # Add AI response to chat history
        chat_histories[user_id].append({"role": "assistant", "content": ai_response})

        # Send response to user
        await message.answer(ai_response)

    except Exception as e:
        logging.error(f"Error calling OpenAI API: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# Back to main menu handler
@dp.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_menu(message: types.Message, state: FSMContext):
    await send_welcome(message, state)


# Default handler
@dp.message()
async def default_handler(message: types.Message, state: FSMContext):
    await send_welcome(message, state)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())